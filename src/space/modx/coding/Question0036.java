package space.modx.coding;

/*
有效的数独
判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。


上图是一个部分填充的有效的数独。

数独部分空格内已填入了数字，空白格用 '.' 表示。

示例 1:

输入:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true
示例 2:

输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
说明:

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。
*/

import java.util.HashMap;

public class Question0036 {
    public boolean isValidSudoku_1(char[][] board) {
        HashMap<Integer, Integer>[] rows = new HashMap[9];
        HashMap<Integer, Integer>[] columns = new HashMap[9];
        HashMap<Integer, Integer>[] boxes = new HashMap[9];
        for (int i = 0; i < 9; i++) {
            rows[i] = new HashMap<>();
            columns[i] = new HashMap<>();
            boxes[i] = new HashMap<>();

        }

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                char num = board[i][j];
                if (num != '.') {
                    int n = (int)num;
                    // 计算子数独序号
                    int box_idx = (i/3) * 3 + (j/3);

                    rows[i].put(n, rows[i].getOrDefault(n, 0) + 1);
                    columns[j].put(n, columns[j].getOrDefault(n, 0) + 1);
                    boxes[box_idx].put(n, boxes[box_idx].getOrDefault(n, 0) + 1);

                    if (rows[i].get(n) > 1 || columns[j].get(n) > 1 || boxes[box_idx].get(n) > 1) {
                        return false;
                    }
                }
            }
        }

        return true;
    }

    /*位运算
    基本知识：
    与运算(a&b)：a,b均为1时，返回1，否则返回0
    异或运算(a ^ b)：a,b不同时为0或1时，返回1，否则返回0

    本题可以使用一个9位二进制数判断数字是否被访问。第k位数为1代表已加入，为0代表未加入
    更新方式(记九位数为val，传入的数字为n)：
    判断是否加入：将九位数右移位n位，与1进行与运算
    结果为0：未加入，将传入的数字加入九位数
    结果为1：已加入，返回false
    将传入的数字加入九位数：将1左移位n位，与val异或即可

    例子：对于数字1010010000，其第4,7,9位为1，表示当前4,7,9已经访问过了
    新来数字为3：
    将1010010000右移3位得到1010010，与1进行与运算，结果为0，未访问过。
    将1左移位3位得到1000，异或后得到1010011000
    新来数字为4：
    将1010010000右移4位得到101001，与1进行与运算，结果为1，访问过。
    返回false
    */
    public boolean isValidSudoku_2(char[][] board) {
        for (int i = 0; i < 9; i++) {
            int row = 0, column = 0, box = 0;
            for (int j = 0; j < 9; j++) {
                int r = board[i][j] - 48;
                int c = board[j][i] - 48;
                int b = board[(i / 3) * 3 + j / 3][(i % 3) * 3 + j % 3] - 48;

                if (r > 0) {
                    row = doValid(r, row);
                }
                if (c > 0 ) {
                    column = doValid(c, column);
                }
                if (b > 0) {
                    box = doValid(b, box);
                }

                if (row == -1 || column == -1 || box == -1) {
                    return false;
                }
            }
        }
        return true;
    }

    private int doValid(int n, int val) {
        return ((val >> n) & 1) == 1 ? -1 : (val ^ (1 << n));
    }
}
